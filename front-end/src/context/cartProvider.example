import React, { useEffect, useState, useMemo, useCallback } from 'react';
import PropTypes from 'prop-types';
import CartContext from './cartContext';

function CartProvider({ children }) {
  const [cart, setCart] = useState([]);

  const updateCart = () => {
    setCart((JSON.parse(localStorage.getItem('cart')) || []));
  };

  useEffect(() => {
    updateCart();
  }, []);

  const addButton = () => {
    setQuantity(quantity + 1);
    addLocalStorage(name, price, id, quantity);
  };
  
  const existsProduct = (arrayProducts) => {
    const foundItemIndex = arrayProducts.findIndex((item) => item.id);
    return foundItemIndex;
  };
  // const addLocalStorage = useCallback((name, price, id, quantity) => {
  //   updateCart();
  //   const cartItens = cart;
  //   const index = (existsProduct(cartItens));
  //   if (!index === -1) {
  //     console.log('nÃ£o tem igual');
  //     const productItem = {
  //       id,
  //       name,
  //       price,
  //       quantity,
  //       subTotal: price * quantity,
  //     };
  //     cartItens.push(productItem);
  //   } else {
  //     console.log('achou igual');
  //     cartItens[index].quantity += quantity;
  //   }
  //   localStorage.setItem('cart', JSON.stringify(cartItens));
  // }, [cart]);

  const contextValue = useMemo(() => (
    {
      cart,
      setCart,
      addLocalStorage,
    }
  ), [cart, addLocalStorage]);

  return (
    <CartContext.Provider value={ contextValue }>
      { children }
    </CartContext.Provider>
  );
}

CartProvider.propTypes = {
  children: PropTypes.node.isRequired,
};

export default CartProvider;
